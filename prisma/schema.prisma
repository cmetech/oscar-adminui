generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Alert {
  ID              Int               @id @default(autoincrement())
  alertGroupID    Int
  status          String            @db.VarChar(50)
  startsAt        DateTime          @db.DateTime(0)
  endsAt          DateTime?         @db.DateTime(0)
  generatorURL    String            @db.Text
  fingerprint     String            @db.Text
  AlertGroup      AlertGroup        @relation(fields: [alertGroupID], references: [ID], onDelete: Cascade, onUpdate: NoAction, map: "Alert_ibfk_1")
  AlertAnnotation AlertAnnotation[]
  AlertLabel      AlertLabel[]

  @@index([alertGroupID], map: "alertGroupID")
}

model AlertAnnotation {
  ID         Int    @id @default(autoincrement())
  AlertID    Int
  Annotation String @db.VarChar(100)
  Value      String @db.VarChar(1000)
  Alert      Alert  @relation(fields: [AlertID], references: [ID], onDelete: Cascade, onUpdate: NoAction, map: "AlertAnnotation_ibfk_1")

  @@index([AlertID], map: "AlertID")
}

model AlertGroup {
  ID               Int                @id @default(autoincrement())
  time             DateTime           @db.Timestamp(0)
  receiver         String             @db.VarChar(100)
  status           String             @db.VarChar(50)
  externalURL      String             @db.Text
  groupKey         String             @db.VarChar(255)
  Alert            Alert[]
  CommonAnnotation CommonAnnotation[]
  CommonLabel      CommonLabel[]
  GroupLabel       GroupLabel[]

  @@index([status, time], map: "idx_status_ts")
  @@index([time], map: "idx_time")
}

model AlertLabel {
  ID      Int    @id @default(autoincrement())
  AlertID Int
  Label   String @db.VarChar(100)
  Value   String @db.VarChar(1000)
  Alert   Alert  @relation(fields: [AlertID], references: [ID], onDelete: Cascade, onUpdate: NoAction, map: "AlertLabel_ibfk_1")

  @@index([AlertID], map: "AlertID")
}

model CommonAnnotation {
  ID           Int        @id @default(autoincrement())
  AlertGroupID Int
  Annotation   String     @db.VarChar(100)
  Value        String     @db.VarChar(1000)
  AlertGroup   AlertGroup @relation(fields: [AlertGroupID], references: [ID], onDelete: Cascade, onUpdate: NoAction, map: "CommonAnnotation_ibfk_1")

  @@index([AlertGroupID], map: "AlertGroupID")
}

model CommonLabel {
  ID           Int        @id @default(autoincrement())
  AlertGroupID Int
  Label        String     @db.VarChar(100)
  Value        String     @db.VarChar(1000)
  AlertGroup   AlertGroup @relation(fields: [AlertGroupID], references: [ID], onDelete: Cascade, onUpdate: NoAction, map: "CommonLabel_ibfk_1")

  @@index([AlertGroupID], map: "AlertGroupID")
}

model GroupLabel {
  ID           Int        @id @default(autoincrement())
  AlertGroupID Int
  GroupLabel   String     @db.VarChar(100)
  Value        String     @db.VarChar(1000)
  AlertGroup   AlertGroup @relation(fields: [AlertGroupID], references: [ID], onDelete: Cascade, onUpdate: NoAction, map: "GroupLabel_ibfk_1")

  @@index([AlertGroupID], map: "AlertGroupID")
}

model Model {
  ID      Model_ID @id
  version String   @db.VarChar(20)
}

model APSchedulerJobs {
  id            String @id
  next_run_time Float?
  job_state     Bytes  @db.Blob

  @@index([next_run_time], map: "ix_APSchedulerJobs_next_run_time")
}

model IM_Components {
  id               String             @id @db.Char(36)
  name             String             @unique(map: "name") @db.VarChar(255)
  type             String?            @db.VarChar(255)
  details          String?            @db.VarChar(255)
  created_at       DateTime?          @default(now()) @db.Timestamp(0)
  modified_at      DateTime?          @default(now()) @db.Timestamp(0)
  IM_Servers       IM_Servers[]
  IM_Subcomponents IM_Subcomponents[]
}

model IM_DataCenters {
  id              String            @id @db.Char(36)
  name            String            @unique(map: "name") @db.VarChar(255)
  location        String?           @db.VarChar(255)
  created_at      DateTime?         @default(now()) @db.Timestamp(0)
  modified_at     DateTime?         @default(now()) @db.Timestamp(0)
  IM_Environments IM_Environments[]
}

model IM_Environments {
  id             String         @id @db.Char(36)
  name           String         @db.VarChar(255)
  description    String?        @db.VarChar(255)
  datacenter_id  String         @db.Char(36)
  created_at     DateTime?      @default(now()) @db.Timestamp(0)
  modified_at    DateTime?      @default(now()) @db.Timestamp(0)
  IM_DataCenters IM_DataCenters @relation(fields: [datacenter_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "IM_Environments_ibfk_1")
  IM_Servers     IM_Servers[]

  @@index([datacenter_id], map: "datacenter_id")
}

model IM_ServerMetadata {
  id          String     @id @db.Char(36)
  server_id   String     @db.Char(36)
  key         String     @db.VarChar(255)
  value       String     @db.VarChar(255)
  created_at  DateTime?  @default(now()) @db.Timestamp(0)
  modified_at DateTime?  @default(now()) @db.Timestamp(0)
  IM_Servers  IM_Servers @relation(fields: [server_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "IM_ServerMetadata_ibfk_1")

  @@index([server_id], map: "server_id")
}

model IM_ServerNetworkInterfaces {
  id          String     @id @db.Char(36)
  server_id   String     @db.Char(36)
  name        String     @db.VarChar(255)
  label       String?    @db.VarChar(255)
  ip_address  String     @unique(map: "ip_address") @db.VarChar(255)
  created_at  DateTime?  @default(now()) @db.Timestamp(0)
  modified_at DateTime?  @default(now()) @db.Timestamp(0)
  IM_Servers  IM_Servers @relation(fields: [server_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "IM_ServerNetworkInterfaces_ibfk_1")

  @@index([server_id], map: "server_id")
}

model IM_Servers {
  id                         String                       @id @db.Char(36)
  hostname                   String                       @db.VarChar(255)
  status                     String                       @db.VarChar(255)
  environment_id             String                       @db.Char(36)
  component_id               String?                      @db.Char(36)
  subcomponent_id            String?                      @db.Char(36)
  group_id                   String?                      @db.Char(36)
  created_at                 DateTime?                    @default(now()) @db.Timestamp(0)
  modified_at                DateTime?                    @default(now()) @db.Timestamp(0)
  IM_ServerMetadata          IM_ServerMetadata[]
  IM_ServerNetworkInterfaces IM_ServerNetworkInterfaces[]
  IM_Environments            IM_Environments              @relation(fields: [environment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "IM_Servers_ibfk_1")
  IM_Components              IM_Components?               @relation(fields: [component_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "IM_Servers_ibfk_2")
  IM_Subcomponents           IM_Subcomponents?            @relation(fields: [subcomponent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "IM_Servers_ibfk_3")
  IM_UserGroups              IM_UserGroups?               @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "IM_Servers_ibfk_4")

  @@index([component_id], map: "component_id")
  @@index([environment_id], map: "environment_id")
  @@index([group_id], map: "group_id")
  @@index([subcomponent_id], map: "subcomponent_id")
}

model IM_Subcomponents {
  id             String        @id @db.Char(36)
  component_id   String        @db.Char(36)
  name           String        @db.VarChar(255)
  specifications String?       @db.VarChar(255)
  created_at     DateTime?     @default(now()) @db.Timestamp(0)
  modified_at    DateTime?     @default(now()) @db.Timestamp(0)
  IM_Servers     IM_Servers[]
  IM_Components  IM_Components @relation(fields: [component_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "IM_Subcomponents_ibfk_1")

  @@index([component_id], map: "component_id")
}

model IM_UserGroups {
  id                        String                      @id @db.Char(36)
  name                      String                      @unique(map: "name") @db.VarChar(255)
  description               String?                     @db.VarChar(255)
  created_at                DateTime?                   @default(now()) @db.Timestamp(0)
  modified_at               DateTime?                   @default(now()) @db.Timestamp(0)
  IM_Servers                IM_Servers[]
  IM_User_Group_Association IM_User_Group_Association[]
}

model IM_User_Group_Association {
  user_id       String        @db.Char(36)
  group_id      String        @db.Char(36)
  Users         Users         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "IM_User_Group_Association_ibfk_1")
  IM_UserGroups IM_UserGroups @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "IM_User_Group_Association_ibfk_2")

  @@id([user_id, group_id])
  @@index([group_id], map: "group_id")
}

model TaskManagerHistory {
  id          String    @id @db.Char(36)
  name        String    @db.VarChar(255)
  state       String    @db.VarChar(255)
  alias       String?   @db.VarChar(255)
  received    DateTime? @db.DateTime(0)
  sent        DateTime? @db.DateTime(0)
  started     DateTime? @db.DateTime(0)
  succeeded   DateTime? @db.DateTime(0)
  timestamp   DateTime? @db.DateTime(0)
  kwargs      String?   @db.VarChar(255)
  args        String?   @db.VarChar(255)
  result      String?   @db.Text
  worker      String?   @db.VarChar(255)
  runtime     Float?    @db.Float
  root_id     String?   @db.Char(36)
  routing_key String?   @db.VarChar(255)
}

model Users {
  username                  String                      @unique(map: "username") @db.VarChar(20)
  first_name                String                      @db.VarChar(20)
  last_name                 String                      @db.VarChar(20)
  id                        String                      @id @db.Char(36)
  email                     String                      @unique(map: "ix_Users_email") @db.VarChar(320)
  hashed_password           String                      @db.VarChar(1024)
  is_active                 Boolean
  is_superuser              Boolean
  is_verified               Boolean
  created_at                DateTime?                   @default(now()) @db.Timestamp(0)
  modified_at               DateTime?                   @default(now()) @db.Timestamp(0)
  IM_User_Group_Association IM_User_Group_Association[]
}

enum Model_ID {
  One @map("1")
}
